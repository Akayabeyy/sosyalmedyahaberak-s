// ========================
// MODULE: App Initialization
// ========================
const SocialMediaApp = (() => {
  // DOM Elements
  const elements = {
    feedContainer: document.getElementById('feed'),
    postForm: document.getElementById('postForm'),
    postContent: document.getElementById('postContent'),
    mediaFileInput: document.getElementById('mediaFile'),
    fileNameDisplay: document.getElementById('fileName'),
    loadingIndicator: document.getElementById('loadingIndicator'),
    suggestionsContainer: document.getElementById('suggestions')
  };

  // State Management
  const state = {
    currentPage: 1,
    isLoading: false,
    hasMore: true,
    userId: document.body.dataset.userId || '1'
  };

  // SignalR Connection
  let connection = null;

  // ========================
  // Initialize Application
  // ========================
  const init = () => {
    if (!validateElements()) {
      console.error('Critical DOM elements missing');
      return;
    }

    setupEventListeners();
    initializeSignalR();
    loadInitialData();
  };

  // ========================
  // MODULE: Element Validation
  // ========================
  const validateElements = () => {
    return Object.values(elements).every(el => {
      if (!el) console.warn('Missing element:', Object.keys(elements).find(key => elements[key] === el));
      return !!el;
    });
  };

  // ========================
  // MODULE: SignalR Integration
  // ========================
  const initializeSignalR = async () => {
    if (typeof signalR === 'undefined') {
      console.warn('SignalR not loaded - real-time features disabled');
      return;
    }

    try {
      connection = new signalR.HubConnectionBuilder()
        .withUrl("/feedHub")
        .configureLogging(signalR.LogLevel.Warning)
        .build();

      // Event Handlers
      connection.on("ReceiveNewPost", handleNewPost);
      connection.on("UpdateLikes", handleLikeUpdate);
      connection.on("NewComment", handleNewComment);

      await startConnection();
    } catch (error) {
      console.error('SignalR initialization failed:', error);
    }
  };

  const startConnection = async () => {
    while (true) {
      try {
        await connection.start();
        await connection.invoke("JoinFeedGroup", state.userId);
        console.log("SignalR connected");
        return;
      } catch (err) {
        console.log("Connection attempt failed, retrying in 5 seconds...");
        await new Promise(res => setTimeout(res, 5000));
      }
    }
  };

  // ========================
  // MODULE: Post Management
  // ========================
  const handleNewPost = (post) => {
    const postElement = createPostElement(post);
    elements.feedContainer.insertBefore(postElement, elements.feedContainer.firstChild);
    animatePostAppearance(postElement);
  };

  const createPostElement = (post) => {
    const postElement = document.createElement('div');
    postElement.className = 'card mb-3 post-card';
    postElement.dataset.postId = post.id;
    
    // ... (rest of post element creation logic)
    return postElement;
  };

  // ========================
  // MODULE: Event Handling
  // ========================
  const setupEventListeners = () => {
    // Form Submission
    if (elements.postForm) {
      elements.postForm.addEventListener('submit', handlePostSubmit);
    }

    // File Input Change
    if (elements.mediaFileInput) {
      elements.mediaFileInput.addEventListener('change', handleFileSelect);
    }

    // Infinite Scroll
    window.addEventListener('scroll', handleScroll);

    // Delegated Event Listeners
    document.addEventListener('click', handleDelegatedEvents);
  };

  const handleDelegatedEvents = async (e) => {
    // Like Button
    if (e.target.closest('.like-btn')) {
      const postId = e.target.closest('.like-btn').dataset.postId;
      await toggleLike(postId);
    }
    
    // Follow Button
    if (e.target.closest('.follow-btn')) {
      const userId = e.target.closest('.follow-btn').dataset.userId;
      await toggleFollow(userId);
    }
  };

  // ========================
  // MODULE: API Interactions
  // ========================
  const fetchPosts = async () => {
    if (state.isLoading || !state.hasMore) return;
    
    state.isLoading = true;
    showLoadingIndicator();

    try {
      const response = await fetch(`/api/posts/feed?userId=${state.userId}&page=${state.currentPage}`);
      const { posts, pagination } = await response.json();
      
      if (state.currentPage === 1) {
        elements.feedContainer.innerHTML = '';
      }

      appendPosts(posts);
      updatePaginationState(pagination);
      
    } catch (error) {
      showError('Failed to load posts');
    } finally {
      state.isLoading = false;
      hideLoadingIndicator();
    }
  };

  // ========================
  // UTILITY FUNCTIONS
  // ========================
  const showLoadingIndicator = () => {
    if (elements.loadingIndicator) {
      elements.loadingIndicator.style.display = 'block';
    }
  };

  const hideLoadingIndicator = () => {
    if (elements.loadingIndicator) {
      elements.loadingIndicator.style.display = 'none';
    }
  };

  const showError = (message) => {
    console.error(message);
    // Implement toast notification
  };

  // Public API
  return {
    init
  };
})();

// Start the application when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
  SocialMediaApp.init();
});

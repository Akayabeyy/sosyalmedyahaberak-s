[HttpGet]
[AllowAnonymous]
public async Task<IActionResult> Login(string returnUrl = null)
{
    // Clear the existing external cookie
    await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);

    ViewData["ReturnUrl"] = returnUrl;
    return View(new LoginViewModel
    {
        ReturnUrl = returnUrl,
        ExternalLogins = (await _signInManager.GetExternalAuthenticationSchemesAsync()).ToList()
    });
}

[HttpPost]
[AllowAnonymous]
[ValidateAntiForgeryToken]
public async Task<IActionResult> Login(LoginViewModel model, string returnUrl = null)
{
    ViewData["ReturnUrl"] = returnUrl;
    model.ExternalLogins = (await _signInManager.GetExternalAuthenticationSchemesAsync()).ToList();

    if (ModelState.IsValid)
    {
        // Check if user exists
        var user = await _userManager.FindByNameAsync(model.UsernameOrEmail) ?? 
                   await _userManager.FindByEmailAsync(model.UsernameOrEmail);

        if (user == null)
        {
            ModelState.AddModelError(string.Empty, "Invalid login attempt");
            return View(model);
        }

        // Check if email is confirmed
        if (!await _userManager.IsEmailConfirmedAsync(user))
        {
            ModelState.AddModelError(string.Empty, "Please confirm your email first");
            return View(model);
        }

        // Check for lockout
        if (await _userManager.IsLockedOutAsync(user))
        {
            ModelState.AddModelError(string.Empty, "Account temporarily locked. Try again later.");
            return View(model);
        }

        // Attempt login
        var result = await _signInManager.PasswordSignInAsync(
            user.UserName, 
            model.Password, 
            model.RememberMe, 
            lockoutOnFailure: true);

        if (result.Succeeded)
        {
            // Check for 2FA requirement
            if (await _userManager.GetTwoFactorEnabledAsync(user))
            {
                model.EnableTwoFactor = true;
                return View(model);
            }

            return RedirectToLocal(returnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            return RedirectToAction(nameof(LoginWith2fa), new { ReturnUrl = returnUrl, RememberMe = model.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            model.IsLockedOut = true;
            return View(model);
        }
        else
        {
            ModelState.AddModelError(string.Empty, "Invalid login attempt");
            return View(model);
        }
    }

    return View(model);
}
[Authorize]
public class ProfileController : Controller
{
    private readonly AppDbContext _context;
    private readonly UserManager<User> _userManager;

    public ProfileController(AppDbContext context, UserManager<User> userManager)
    {
        _context = context;
        _userManager = userManager;
    }

    [HttpGet("{id}")]
    public async Task<IActionResult> Index(int id)
    {
        var user = await _context.Users
            .Include(u => u.Posts)
                .ThenInclude(p => p.Likes)
            .Include(u => u.Posts)
                .ThenInclude(p => p.Comments)
            .Include(u => u.Followers)
                .ThenInclude(uf => uf.Follower)
            .Include(u => u.Following)
                .ThenInclude(uf => uf.Followed)
            .FirstOrDefaultAsync(u => u.Id == id);

        if (user == null) return NotFound();

        var currentUser = await _userManager.GetUserAsync(User);
        var isFollowing = await _context.UserFollows
            .AnyAsync(uf => uf.FollowerId == currentUser.Id && uf.FollowedId == id);

        var model = new ProfileViewModel
        {
            User = user,
            IsFollowing = isFollowing,
            IsCurrentUser = currentUser.Id == id
        };

        return View(model);
    }

    [HttpPost("follow/{id}")]
    public async Task<IActionResult> Follow(int id)
    {
        var currentUser = await _userManager.GetUserAsync(User);
        if (currentUser == null) return Unauthorized();

        var existingFollow = await _context.UserFollows
            .FirstOrDefaultAsync(uf => uf.FollowerId == currentUser.Id && uf.FollowedId == id);

        if (existingFollow == null)
        {
            _context.UserFollows.Add(new UserFollow
            {
                FollowerId = currentUser.Id,
                FollowedId = id,
                CreatedAt = DateTime.UtcNow
            });
        }

        await _context.SaveChangesAsync();
        return RedirectToAction("Index", new { id });
    }

    [HttpPost("unfollow/{id}")]
    public async Task<IActionResult> Unfollow(int id)
    {
        var currentUser = await _userManager.GetUserAsync(User);
        if (currentUser == null) return Unauthorized();

        var follow = await _context.UserFollows
            .FirstOrDefaultAsync(uf => uf.FollowerId == currentUser.Id && uf.FollowedId == id);

        if (follow != null)
        {
            _context.UserFollows.Remove(follow);
            await _context.SaveChangesAsync();
        }

        return RedirectToAction("Index", new { id });
    }
}
